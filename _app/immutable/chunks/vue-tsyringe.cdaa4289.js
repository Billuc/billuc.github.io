import{S as In,i as Tn,s as gn,k as o,q as i,a as c,l as p,m as l,r,h as s,c as u,n as f,b as a,D as t,I as Et}from"./index.7cfd5edb.js";function Pn(on){let m,k,fe,us,fs,I,ks,ds,T,ys,ms,_e,L,hs,Ie,N,vs,Te,h,ws,g,Es,bs,ge,F,_s,Pe,B,Is,je,J,Ts,Ce,W,Y,gs,P,Ps,De,d,js,j,Cs,Ds,C,Vs,As,Ve,U,Ms,Ae,v,Os,D,Rs,xs,Me,K,Ss,Oe,V,pn=`<code class="language-bash"><span class="token comment"># npm 7+, extra double-dash is needed:</span>
<span class="token function">npm</span> create vite@latest vue-vite-tsyringe -- <span class="token parameter variable">--template</span> vue-ts</code>`,Re,Q,qs,xe,A,ln=`<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> tsyringe
<span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript reflect-metadata @rollup/plugin-typescript</code>`,Se,z,G,ke,Hs,Ls,qe,X,Z,de,Ns,Fs,He,y,Bs,ye,Js,Ws,me,Ys,Us,Le,M,rn=`<code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        ...
        <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"emitDecoratorMetadata"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ne,$,Ks,Fe,w,Qs,he,zs,Gs,Be,O,cn=`<code class="language-ts"><span class="token operator">...</span>
<span class="token keyword">import</span> rollupTypescript <span class="token keyword">from</span> <span class="token string">"@rollup/plugin-typescript"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">rollupTypescript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,Je,ee,se,ve,Xs,Zs,We,E,$s,we,et,st,Ye,R,un=`<code class="language-ts"><span class="token keyword">import</span> <span class="token string">"reflect-metadata"</span><span class="token punctuation">;</span>
<span class="token operator">...</span></code>`,Ue,te,tt,Ke,ne,nt,Qe,ae,at,ze,oe,ot,Ge,x,fn=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> container <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'tsyringe'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Plugin <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> containerPlugin<span class="token operator">:</span> <span class="token function-variable function">Plugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// This not necessary, container is already the default container provided by tsyringe and can be used directly</span>
	<span class="token keyword">const</span> myContainer <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">createChildContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Register services here</span>
	<span class="token comment">// Example</span>
	<span class="token comment">// myContainer.registerSingleton(Database);</span>

	<span class="token comment">// That allows us to get an easy access to our container in the components</span>
	app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">,</span> myContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> app<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> containerPlugin<span class="token punctuation">;</span></code>`,Xe,b,pt,Ee,lt,it,Ze,S,kn=`<code class="language-ts"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>containerPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,$e,pe,rt,es,q,dn=`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> DependencyContainer<span class="token punctuation">,</span> InjectionToken <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'tsyringe'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useService <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>token<span class="token operator">:</span> InjectionToken<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// This returns the container provided in the plugin</span>
	<span class="token keyword">const</span> myContainer<span class="token operator">:</span> DependencyContainer <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>myContainer<span class="token punctuation">)</span>
		<span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'DependencyContainer not available ! Are you using the DI plugin ?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> myContainer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,ss,_,ct,be,ut,ft,ts,le,kt,ns,ie,dt,as,re,yt;return{c(){m=o("blockquote"),k=o("p"),fe=o("em"),us=i("DISCLAIMER:"),fs=i(" this does not work, I managed to make tsyringe work in one project, but it doesn’t in "),I=o("a"),ks=i("this example repo"),ds=i(" and the reason why is not trivial. Since the last release of tsyringe dates to 2020, I recommend using another library such as "),T=o("a"),ys=i("InversifyJS"),ms=i(" !"),_e=c(),L=o("h2"),hs=i("Introduction"),Ie=c(),N=o("p"),vs=i("When you create a class, it often depends on other classes. For example, for a Web server, you can have controllers that depend on services and those services themselves depend on repositories. Thus, if we want to use our controller, we have to provide it a service and to do so, we have to provide the service a repository… You get the idea !"),Te=c(),h=o("p"),ws=i("One solution to this problem is "),g=o("a"),Es=i("Dependency Injection (DI)"),bs=i(". With dependency injection, I only have to add the dependencies to the constructor of the class I am writing and they are automatically provided. I don’t have to create them, to worry about leakage or anything ! This is like magic ! As a plus, it makes it very easy to manage your classes’ lifecycles. You need a singleton, register your class as a singleton ! You need a new instance each time, register your class with a factory !"),ge=c(),F=o("h2"),_s=i("My experience with DI"),Pe=c(),B=o("p"),Is=i("I discovered DI with backends written with statically typed programming languages, namely .NET Core with C# and Spring Boot with Java. With those technologies, you have to write interfaces, which may seem like more work, but also allows to change the implementations easily and really decouple classes from their dependencies."),je=c(),J=o("p"),Ts=i("I have gotten used to using DI so much that I now use it in almost all my projects, even though I am not coding with a statically typed language."),Ce=c(),W=o("blockquote"),Y=o("p"),gs=i("Note: I even wrote a DI library for Python called "),P=o("a"),Ps=i("taipan-di"),De=c(),d=o("p"),js=i("As a lot of my projects lately involve some frontend framework, I had to find a JS or TS library for that. At that time I was working on the project "),j=o("a"),Cs=i("Muninn"),Ds=i(". I knew that Angular had its own DI mechanism implemented, but Muninn uses Vue3. A library we used at a company I used to work at was "),C=o("a"),Vs=i("tsyringe"),As=i(". This library is very powerful and very pratical since it relies on decorators to register or mark classes as injectable. Here is how I integrated tsyringe into my Vue3 project."),Ve=c(),U=o("h2"),Ms=i("Integrating Tsyringe"),Ae=c(),v=o("p"),Os=i("This part is adapted from "),D=o("a"),Rs=i("this blog"),xs=i(". The tutorial is meant for Node.JS, but the procedure is similar for Vue, just slightly modified to fit our setup."),Me=c(),K=o("p"),Ss=i("First, create your Vue + Vite project"),Oe=c(),V=o("pre"),Re=c(),Q=o("p"),qs=i("Then, install the dependencies"),xe=c(),A=o("pre"),Se=c(),z=o("blockquote"),G=o("p"),ke=o("code"),Hs=i("reflect-metadata"),Ls=i(" is a dependency that allows us to use decorators. In more details it is a polyfill that provides the Reflect API."),qe=c(),X=o("blockquote"),Z=o("p"),de=o("code"),Ns=i("@rollup/plugin-typescript"),Fs=i(" is a plugin for Rollup (which is the bundler used by Vite under the hood). This is a crucial dependency to make tsyringe work with Vite as Rollup does not support decorators by default."),He=c(),y=o("p"),Bs=i("Next, add those properties to the "),ye=o("code"),Js=i("tsconfig.json"),Ws=i(" file (or "),me=o("code"),Ys=i("tsconfig.app.json"),Us=i(" in the repo)"),Le=c(),M=o("pre"),Ne=c(),$=o("p"),Ks=i("These properties are here to help with decorators."),Fe=c(),w=o("p"),Qs=i("Modify the "),he=o("code"),zs=i("vite.config.ts"),Gs=i(" file to use the Rollup plugin"),Be=c(),O=o("pre"),Je=c(),ee=o("blockquote"),se=o("p"),ve=o("em"),Xs=i("IMPORTANT:"),Zs=i(" Note that the rollupTypescript plugin has to be in second position -right after the vue plugin- in order for this to work !"),We=c(),E=o("p"),$s=i("Finally, import the Reflect polyfill in the "),we=o("code"),et=i("main.ts"),st=i(" file."),Ye=c(),R=o("pre"),Ue=c(),te=o("p"),tt=i("This is enough to use tsyringe in your Vite project."),Ke=c(),ne=o("h2"),nt=i("My way of using it in Vue"),Qe=c(),ae=o("p"),at=i("In my Vue project, I added some stuff to simplify my life when coding services and components. You can take inspiration from them if you want to !"),ze=c(),oe=o("p"),ot=i("First I created a Vue plugin to register my services."),Ge=c(),x=o("pre"),Xe=c(),b=o("p"),pt=i("Then, registered the plugin in "),Ee=o("code"),lt=i("main.ts"),it=i("."),Ze=c(),S=o("pre"),$e=c(),pe=o("p"),rt=i("Then, I created a utility composable / hook to resolve the services in the components."),es=c(),q=o("pre"),ss=c(),_=o("p"),ct=i("Create your services, add them to the container in the plugin and use "),be=o("code"),ut=i("useService"),ft=i(" to resolve them in your components."),ts=c(),le=o("h2"),kt=i("Conclusion"),ns=c(),ie=o("p"),dt=i("Here is how I setup my project to work with dependency injection in Vue and Vite. This should allow you to create Vue components in a more modular way with more streamlined development cycles."),as=c(),re=o("p"),yt=i("Feel free to experiment with that and to give me your feedback."),this.h()},l(e){m=p(e,"BLOCKQUOTE",{});var n=l(m);k=p(n,"P",{});var H=l(k);fe=p(H,"EM",{});var bt=l(fe);us=r(bt,"DISCLAIMER:"),bt.forEach(s),fs=r(H," this does not work, I managed to make tsyringe work in one project, but it doesn’t in "),I=p(H,"A",{href:!0,rel:!0});var _t=l(I);ks=r(_t,"this example repo"),_t.forEach(s),ds=r(H," and the reason why is not trivial. Since the last release of tsyringe dates to 2020, I recommend using another library such as "),T=p(H,"A",{href:!0,rel:!0});var It=l(T);ys=r(It,"InversifyJS"),It.forEach(s),ms=r(H," !"),H.forEach(s),n.forEach(s),_e=u(e),L=p(e,"H2",{});var Tt=l(L);hs=r(Tt,"Introduction"),Tt.forEach(s),Ie=u(e),N=p(e,"P",{});var gt=l(N);vs=r(gt,"When you create a class, it often depends on other classes. For example, for a Web server, you can have controllers that depend on services and those services themselves depend on repositories. Thus, if we want to use our controller, we have to provide it a service and to do so, we have to provide the service a repository… You get the idea !"),gt.forEach(s),Te=u(e),h=p(e,"P",{});var os=l(h);ws=r(os,"One solution to this problem is "),g=p(os,"A",{href:!0,rel:!0});var Pt=l(g);Es=r(Pt,"Dependency Injection (DI)"),Pt.forEach(s),bs=r(os,". With dependency injection, I only have to add the dependencies to the constructor of the class I am writing and they are automatically provided. I don’t have to create them, to worry about leakage or anything ! This is like magic ! As a plus, it makes it very easy to manage your classes’ lifecycles. You need a singleton, register your class as a singleton ! You need a new instance each time, register your class with a factory !"),os.forEach(s),ge=u(e),F=p(e,"H2",{});var jt=l(F);_s=r(jt,"My experience with DI"),jt.forEach(s),Pe=u(e),B=p(e,"P",{});var Ct=l(B);Is=r(Ct,"I discovered DI with backends written with statically typed programming languages, namely .NET Core with C# and Spring Boot with Java. With those technologies, you have to write interfaces, which may seem like more work, but also allows to change the implementations easily and really decouple classes from their dependencies."),Ct.forEach(s),je=u(e),J=p(e,"P",{});var Dt=l(J);Ts=r(Dt,"I have gotten used to using DI so much that I now use it in almost all my projects, even though I am not coding with a statically typed language."),Dt.forEach(s),Ce=u(e),W=p(e,"BLOCKQUOTE",{});var Vt=l(W);Y=p(Vt,"P",{});var mt=l(Y);gs=r(mt,"Note: I even wrote a DI library for Python called "),P=p(mt,"A",{href:!0,rel:!0});var At=l(P);Ps=r(At,"taipan-di"),At.forEach(s),mt.forEach(s),Vt.forEach(s),De=u(e),d=p(e,"P",{});var ce=l(d);js=r(ce,"As a lot of my projects lately involve some frontend framework, I had to find a JS or TS library for that. At that time I was working on the project "),j=p(ce,"A",{href:!0,rel:!0});var Mt=l(j);Cs=r(Mt,"Muninn"),Mt.forEach(s),Ds=r(ce,". I knew that Angular had its own DI mechanism implemented, but Muninn uses Vue3. A library we used at a company I used to work at was "),C=p(ce,"A",{href:!0,rel:!0});var Ot=l(C);Vs=r(Ot,"tsyringe"),Ot.forEach(s),As=r(ce,". This library is very powerful and very pratical since it relies on decorators to register or mark classes as injectable. Here is how I integrated tsyringe into my Vue3 project."),ce.forEach(s),Ve=u(e),U=p(e,"H2",{});var Rt=l(U);Ms=r(Rt,"Integrating Tsyringe"),Rt.forEach(s),Ae=u(e),v=p(e,"P",{});var ps=l(v);Os=r(ps,"This part is adapted from "),D=p(ps,"A",{href:!0,rel:!0});var xt=l(D);Rs=r(xt,"this blog"),xt.forEach(s),xs=r(ps,". The tutorial is meant for Node.JS, but the procedure is similar for Vue, just slightly modified to fit our setup."),ps.forEach(s),Me=u(e),K=p(e,"P",{});var St=l(K);Ss=r(St,"First, create your Vue + Vite project"),St.forEach(s),Oe=u(e),V=p(e,"PRE",{class:!0});var yn=l(V);yn.forEach(s),Re=u(e),Q=p(e,"P",{});var qt=l(Q);qs=r(qt,"Then, install the dependencies"),qt.forEach(s),xe=u(e),A=p(e,"PRE",{class:!0});var mn=l(A);mn.forEach(s),Se=u(e),z=p(e,"BLOCKQUOTE",{});var Ht=l(z);G=p(Ht,"P",{});var ht=l(G);ke=p(ht,"CODE",{});var Lt=l(ke);Hs=r(Lt,"reflect-metadata"),Lt.forEach(s),Ls=r(ht," is a dependency that allows us to use decorators. In more details it is a polyfill that provides the Reflect API."),ht.forEach(s),Ht.forEach(s),qe=u(e),X=p(e,"BLOCKQUOTE",{});var Nt=l(X);Z=p(Nt,"P",{});var vt=l(Z);de=p(vt,"CODE",{});var Ft=l(de);Ns=r(Ft,"@rollup/plugin-typescript"),Ft.forEach(s),Fs=r(vt," is a plugin for Rollup (which is the bundler used by Vite under the hood). This is a crucial dependency to make tsyringe work with Vite as Rollup does not support decorators by default."),vt.forEach(s),Nt.forEach(s),He=u(e),y=p(e,"P",{});var ue=l(y);Bs=r(ue,"Next, add those properties to the "),ye=p(ue,"CODE",{});var Bt=l(ye);Js=r(Bt,"tsconfig.json"),Bt.forEach(s),Ws=r(ue," file (or "),me=p(ue,"CODE",{});var Jt=l(me);Ys=r(Jt,"tsconfig.app.json"),Jt.forEach(s),Us=r(ue," in the repo)"),ue.forEach(s),Le=u(e),M=p(e,"PRE",{class:!0});var hn=l(M);hn.forEach(s),Ne=u(e),$=p(e,"P",{});var Wt=l($);Ks=r(Wt,"These properties are here to help with decorators."),Wt.forEach(s),Fe=u(e),w=p(e,"P",{});var ls=l(w);Qs=r(ls,"Modify the "),he=p(ls,"CODE",{});var Yt=l(he);zs=r(Yt,"vite.config.ts"),Yt.forEach(s),Gs=r(ls," file to use the Rollup plugin"),ls.forEach(s),Be=u(e),O=p(e,"PRE",{class:!0});var vn=l(O);vn.forEach(s),Je=u(e),ee=p(e,"BLOCKQUOTE",{});var Ut=l(ee);se=p(Ut,"P",{});var wt=l(se);ve=p(wt,"EM",{});var Kt=l(ve);Xs=r(Kt,"IMPORTANT:"),Kt.forEach(s),Zs=r(wt," Note that the rollupTypescript plugin has to be in second position -right after the vue plugin- in order for this to work !"),wt.forEach(s),Ut.forEach(s),We=u(e),E=p(e,"P",{});var is=l(E);$s=r(is,"Finally, import the Reflect polyfill in the "),we=p(is,"CODE",{});var Qt=l(we);et=r(Qt,"main.ts"),Qt.forEach(s),st=r(is," file."),is.forEach(s),Ye=u(e),R=p(e,"PRE",{class:!0});var wn=l(R);wn.forEach(s),Ue=u(e),te=p(e,"P",{});var zt=l(te);tt=r(zt,"This is enough to use tsyringe in your Vite project."),zt.forEach(s),Ke=u(e),ne=p(e,"H2",{});var Gt=l(ne);nt=r(Gt,"My way of using it in Vue"),Gt.forEach(s),Qe=u(e),ae=p(e,"P",{});var Xt=l(ae);at=r(Xt,"In my Vue project, I added some stuff to simplify my life when coding services and components. You can take inspiration from them if you want to !"),Xt.forEach(s),ze=u(e),oe=p(e,"P",{});var Zt=l(oe);ot=r(Zt,"First I created a Vue plugin to register my services."),Zt.forEach(s),Ge=u(e),x=p(e,"PRE",{class:!0});var En=l(x);En.forEach(s),Xe=u(e),b=p(e,"P",{});var rs=l(b);pt=r(rs,"Then, registered the plugin in "),Ee=p(rs,"CODE",{});var $t=l(Ee);lt=r($t,"main.ts"),$t.forEach(s),it=r(rs,"."),rs.forEach(s),Ze=u(e),S=p(e,"PRE",{class:!0});var bn=l(S);bn.forEach(s),$e=u(e),pe=p(e,"P",{});var en=l(pe);rt=r(en,"Then, I created a utility composable / hook to resolve the services in the components."),en.forEach(s),es=u(e),q=p(e,"PRE",{class:!0});var _n=l(q);_n.forEach(s),ss=u(e),_=p(e,"P",{});var cs=l(_);ct=r(cs,"Create your services, add them to the container in the plugin and use "),be=p(cs,"CODE",{});var sn=l(be);ut=r(sn,"useService"),sn.forEach(s),ft=r(cs," to resolve them in your components."),cs.forEach(s),ts=u(e),le=p(e,"H2",{});var tn=l(le);kt=r(tn,"Conclusion"),tn.forEach(s),ns=u(e),ie=p(e,"P",{});var nn=l(ie);dt=r(nn,"Here is how I setup my project to work with dependency injection in Vue and Vite. This should allow you to create Vue components in a more modular way with more streamlined development cycles."),nn.forEach(s),as=u(e),re=p(e,"P",{});var an=l(re);yt=r(an,"Feel free to experiment with that and to give me your feedback."),an.forEach(s),this.h()},h(){f(I,"href","https://github.com/Billuc/vue-vite-tsyringe"),f(I,"rel","nofollow"),f(T,"href","https://github.com/inversify/InversifyJS"),f(T,"rel","nofollow"),f(g,"href","https://en.wikipedia.org/wiki/Dependency_injection"),f(g,"rel","nofollow"),f(P,"href","https://github.com/Billuc/Taipan-DI"),f(P,"rel","nofollow"),f(j,"href","https://billuc.github.io/Muninn"),f(j,"rel","nofollow"),f(C,"href","https://github.com/microsoft/tsyringe"),f(C,"rel","nofollow"),f(D,"href","https://medium.com/@mohamed.ma872/a-step-by-step-guide-to-using-tsyringe-for-dependency-injection-in-typescript-842443bcd24f"),f(D,"rel","nofollow"),f(V,"class","language-bash"),f(A,"class","language-bash"),f(M,"class","language-json"),f(O,"class","language-ts"),f(R,"class","language-ts"),f(x,"class","language-ts"),f(S,"class","language-ts"),f(q,"class","language-ts")},m(e,n){a(e,m,n),t(m,k),t(k,fe),t(fe,us),t(k,fs),t(k,I),t(I,ks),t(k,ds),t(k,T),t(T,ys),t(k,ms),a(e,_e,n),a(e,L,n),t(L,hs),a(e,Ie,n),a(e,N,n),t(N,vs),a(e,Te,n),a(e,h,n),t(h,ws),t(h,g),t(g,Es),t(h,bs),a(e,ge,n),a(e,F,n),t(F,_s),a(e,Pe,n),a(e,B,n),t(B,Is),a(e,je,n),a(e,J,n),t(J,Ts),a(e,Ce,n),a(e,W,n),t(W,Y),t(Y,gs),t(Y,P),t(P,Ps),a(e,De,n),a(e,d,n),t(d,js),t(d,j),t(j,Cs),t(d,Ds),t(d,C),t(C,Vs),t(d,As),a(e,Ve,n),a(e,U,n),t(U,Ms),a(e,Ae,n),a(e,v,n),t(v,Os),t(v,D),t(D,Rs),t(v,xs),a(e,Me,n),a(e,K,n),t(K,Ss),a(e,Oe,n),a(e,V,n),V.innerHTML=pn,a(e,Re,n),a(e,Q,n),t(Q,qs),a(e,xe,n),a(e,A,n),A.innerHTML=ln,a(e,Se,n),a(e,z,n),t(z,G),t(G,ke),t(ke,Hs),t(G,Ls),a(e,qe,n),a(e,X,n),t(X,Z),t(Z,de),t(de,Ns),t(Z,Fs),a(e,He,n),a(e,y,n),t(y,Bs),t(y,ye),t(ye,Js),t(y,Ws),t(y,me),t(me,Ys),t(y,Us),a(e,Le,n),a(e,M,n),M.innerHTML=rn,a(e,Ne,n),a(e,$,n),t($,Ks),a(e,Fe,n),a(e,w,n),t(w,Qs),t(w,he),t(he,zs),t(w,Gs),a(e,Be,n),a(e,O,n),O.innerHTML=cn,a(e,Je,n),a(e,ee,n),t(ee,se),t(se,ve),t(ve,Xs),t(se,Zs),a(e,We,n),a(e,E,n),t(E,$s),t(E,we),t(we,et),t(E,st),a(e,Ye,n),a(e,R,n),R.innerHTML=un,a(e,Ue,n),a(e,te,n),t(te,tt),a(e,Ke,n),a(e,ne,n),t(ne,nt),a(e,Qe,n),a(e,ae,n),t(ae,at),a(e,ze,n),a(e,oe,n),t(oe,ot),a(e,Ge,n),a(e,x,n),x.innerHTML=fn,a(e,Xe,n),a(e,b,n),t(b,pt),t(b,Ee),t(Ee,lt),t(b,it),a(e,Ze,n),a(e,S,n),S.innerHTML=kn,a(e,$e,n),a(e,pe,n),t(pe,rt),a(e,es,n),a(e,q,n),q.innerHTML=dn,a(e,ss,n),a(e,_,n),t(_,ct),t(_,be),t(be,ut),t(_,ft),a(e,ts,n),a(e,le,n),t(le,kt),a(e,ns,n),a(e,ie,n),t(ie,dt),a(e,as,n),a(e,re,n),t(re,yt)},p:Et,i:Et,o:Et,d(e){e&&s(m),e&&s(_e),e&&s(L),e&&s(Ie),e&&s(N),e&&s(Te),e&&s(h),e&&s(ge),e&&s(F),e&&s(Pe),e&&s(B),e&&s(je),e&&s(J),e&&s(Ce),e&&s(W),e&&s(De),e&&s(d),e&&s(Ve),e&&s(U),e&&s(Ae),e&&s(v),e&&s(Me),e&&s(K),e&&s(Oe),e&&s(V),e&&s(Re),e&&s(Q),e&&s(xe),e&&s(A),e&&s(Se),e&&s(z),e&&s(qe),e&&s(X),e&&s(He),e&&s(y),e&&s(Le),e&&s(M),e&&s(Ne),e&&s($),e&&s(Fe),e&&s(w),e&&s(Be),e&&s(O),e&&s(Je),e&&s(ee),e&&s(We),e&&s(E),e&&s(Ye),e&&s(R),e&&s(Ue),e&&s(te),e&&s(Ke),e&&s(ne),e&&s(Qe),e&&s(ae),e&&s(ze),e&&s(oe),e&&s(Ge),e&&s(x),e&&s(Xe),e&&s(b),e&&s(Ze),e&&s(S),e&&s($e),e&&s(pe),e&&s(es),e&&s(q),e&&s(ss),e&&s(_),e&&s(ts),e&&s(le),e&&s(ns),e&&s(ie),e&&s(as),e&&s(re)}}}const Cn={title:"Using Dependency Injection in Vue3 + Vite with Tsyringe",createdAt:"17/08/2024",lastUpdatedAt:"18/08/2024"};class Dn extends In{constructor(m){super(),Tn(this,m,null,Pn,gn,{})}}export{Dn as default,Cn as metadata};
